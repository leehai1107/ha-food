// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  accounts Account[]

  @@map("roles")
}

model Account {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  phone        String?
  address      String?
  roleId       Int      @map("role_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  role   Role    @relation(fields: [roleId], references: [id])
  orders Order[]
  news   News[]

  @@map("accounts")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String?  @map("image_url")
  parentId    Int?     @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  productSku           String   @id @map("product_sku")
  productName          String   @map("product_name")
  slug                String?   @unique @map("slug")
  quantity             Int      @default(0)
  productType          String   @map("product_type")
  originalPrice        Decimal  @map("original_price") @db.Decimal(12, 2)
  currentPrice         Decimal  @map("current_price") @db.Decimal(12, 2)
  tags                 String[]
  productDescriptions  String?  @map("product_descriptions")
  productIngredients   String[] @map("product_ingredients")
  productContent       String?  @map("product_content")
  productPreserve      String?  @map("product_preserve")
  available            Boolean  @default(true)
  rating               Decimal? @db.Decimal(3, 2)
  reviewCount          Int?     @default(0) @map("review_count")
  weight               String?
  categoryId           Int?     @map("category_id")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  category     Category?      @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  orderItems   OrderItem[]
  reviews      Review[]

  @@index([slug], map: "idx_products_slug")
  @@map("products")
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productSku String   @map("product_sku")
  imageUrl   String   @map("image_url")
  isPrimary  Boolean  @default(false) @map("is_primary")
  position   Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productSku], references: [productSku], onDelete: Cascade)

  @@index([productSku], map: "idx_product_images_sku")
  @@map("product_images")
}

model News {
  id            Int      @id @default(autoincrement())
  title         String
  slug          String   @unique // URL-friendly version of title
  excerpt       String?  // Short description for listing
  content       String   // Rich text content (HTML)
  featuredImage String?  @map("featured_image") // Main image URL
  tags          String[] // Tags for categorization
  authorId      Int?     @map("author_id") // Reference to account who created it
  isPublished   Boolean  @default(false) @map("is_published")
  publishedAt   DateTime? @map("published_at")
  viewCount     Int      @default(0) @map("view_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  author Account? @relation(fields: [authorId], references: [id])

  @@index([isPublished, publishedAt], map: "idx_news_published")
  @@index([slug], map: "idx_news_slug")
  @@map("news")
}

model Order {
  id            Int      @id @default(autoincrement())
  accountId     Int?     @map("account_id")
  status        String   @default("pending")
  totalPrice    Decimal? @map("total_price") @db.Decimal(12, 2)
  // Guest customer information
  customerName  String?  @map("customer_name")
  customerEmail String?  @map("customer_email")
  customerPhone String?  @map("customer_phone")
  customerAddress String? @map("customer_address")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  account    Account?    @relation(fields: [accountId], references: [id])
  orderItems OrderItem[]

  @@index([accountId], map: "idx_orders_account_id")
  @@map("orders")
}

model OrderItem {
  id                   Int     @id @default(autoincrement())
  orderId              Int     @map("order_id")
  productSku           String? @map("product_sku")
  productName          String  @map("product_name")
  productType          String  @map("product_type")
  productPrice         Decimal @map("product_price") @db.Decimal(12, 2)
  quantity             Int
  totalPrice           Decimal @map("total_price") @db.Decimal(12, 2)
  tags                 String[]
  productDescriptions  String? @map("product_descriptions")
  productIngredients   String[] @map("product_ingredients")
  productContent       String? @map("product_content")
  productPreserve      String? @map("product_preserve")
  weight               String?

  // Relations
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productSku], references: [productSku])

  @@index([orderId], map: "idx_order_items_order_id")
  @@map("order_items")
}

model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  type        String   // 'color', 'font', 'text', 'number', 'boolean', 'json'
  category    String   // 'theme', 'typography', 'layout', 'general', 'animation'
  label       String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([category], map: "idx_system_config_category")
  @@index([key], map: "idx_system_config_key")
  @@map("system_config")
}

model Review {
  id          Int      @id @default(autoincrement())
  productSku  String   @map("product_sku")
  customerName String
  rating      Int      @default(5) // Có thể dùng Decimal nếu bạn muốn rating 4.5 chẳng hạn
  content     String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productSku], references: [productSku], onDelete: Cascade)

  @@index([productSku], map: "idx_reviews_product_sku")
  @@map("reviews")
}

model Discount {
  id          Int      @id @default(autoincrement())
  minQuantity Int      @map("min_quantity")
  discountPercent Decimal @map("discount_percent") @db.Decimal(5, 2)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("discounts")
}

model Gallery {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  tags        String[]
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  images GalleryImage[]

  @@index([isActive], map: "idx_gallery_active")
  @@map("galleries")
}

model GalleryImage {
  id         Int      @id @default(autoincrement())
  galleryId  Int      @map("gallery_id")
  imageUrl   String   @map("image_url")
  altText    String?  @map("alt_text")
  position   Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@index([galleryId], map: "idx_gallery_images_gallery_id")
  @@index([position], map: "idx_gallery_images_position")
  @@map("gallery_images")
}
